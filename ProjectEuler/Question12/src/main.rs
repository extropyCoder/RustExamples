//Project Euler Question 12

//The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
//The first ten terms would be:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:

//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28

//We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?




fn main() {
    println!("Starting Euler 12 !");

    let mut current_triangle = 0;
    let mut counter = 0;
    while counter < 2000000{
            counter+=1;
            current_triangle += counter;
             if find_factor_count(current_triangle) >=500{
                 break;
        }
    }
    println!("Triangle number is {}",current_triangle);
    println!("Size is {}",find_factor_count(current_triangle));

    }

    fn find_factor_count(n : u32) -> usize{
        let mut factors = vec![1];
        let limit:u32 = ((n as f32).sqrt()).ceil() as u32;
        for x in 2..limit {
            if n % x == 0 {
                factors.push(x);
                factors.push(n/x);
            }
        }
        return factors.len();

    }
